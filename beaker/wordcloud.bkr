{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "shellID": null
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "shellID": null
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "shellID": "B902048F229642E58BEF14FB2C890F74",
            "imports": "",
            "supplementalClassPath": ""
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "shellID": null,
            "jsSetting2": "",
            "jsSetting1": ""
        },
        {
            "name": "R",
            "plugin": "R",
            "shellID": "00adb6eb-4ba6-47d6-865d-621aa8c56e6f"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "/r/datascience word cloud using Python and D3",
            "collapsed": false
        },
        {
            "id": "codegxtkFT",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "#Grab the most recent posts to http://www.reddit.com/r/datascience and count the occurences of each word in the titles\n\nimport pandas as pd\nfrom collections import Counter\n\nreddit = pd.read_json(\"http://www.reddit.com/r/datascience.json\")\nposts = pd.DataFrame([x['data'] for x in reddit['data']['children']])\n\nwords = []\nfor x in posts['title']:\n  words += x.lower().split()\n\nc = Counter(words)\ns = pd.Series(c)\ncounts = pd.DataFrame(s)"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 1173
            }
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "Html",
            "input": {
                "body": "<!-- grab Jason Davies's word cloud layout -->\n<script src=\"https://raw.githubusercontent.com/jasondavies/d3-cloud/master/d3.layout.cloud.js\"></script>\n\n<div id=\"cloud\"></div>\n\n<script>\n  //create a dummy cell to get Python DataFrame into JavaScript\n  var cell = { evaluator: \"IPython\", input: { body: \"counts\" }, output: {} };\n\n  //Use the bkHelper API to evaluate the cell\n  bkHelper.evaluate(cell).then(function(){\n\n      //Grab the DF as a 2D JS array\n      var data = cell.output.result.values;\n    \n      //create a list of maps, as expected by the word cloud layout\n      var wc = [];\n      _.each(data, function(a){\n        wc.push({text: a[0], count: a[1]})\n      })\n\n    var fill = d3.scale.category20();\n    var fontSize = d3.scale.log().range([20, 100]);\n\n    var w = 800;\n    var h = 800;\n\n    d3.layout.cloud()\n        .size([w, h])\n        .words(wc)\n        .rotate(function(d) { return ~~(Math.random() * 5) * 30 - 60; })\n        .font(\"Impact\")\n        .fontSize(function(d) { return fontSize(+d.count); })\n        .on(\"end\", draw)\n        .start();\n\n    function draw(words) {\n      d3.select(\"#cloud\").append(\"svg\")\n          .attr(\"width\", w)\n          .attr(\"height\", h)\n        .append(\"g\")\n          .attr(\"transform\", \"translate(300,300)\")\n        .selectAll(\"text\")\n          .data(words)\n        .enter().append(\"text\")\n          .style(\"font-size\", function(d) { return d.size + \"px\"; })\n          .style(\"font-family\", \"Impact\")\n          .style(\"fill\", function(d, i) { return fill(i); })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n          })\n          .text(function(d) { return d.text; });\n    }    \n  })  \n  \n  \n</script>"
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<!-- grab Jason Davies's word cloud layout -->\n<script src=\"https://raw.githubusercontent.com/jasondavies/d3-cloud/master/d3.layout.cloud.js\"></script>\n\n<div id=\"cloud\"></div>\n\n<script>\n  //create a dummy cell to get Python DataFrame into JavaScript\n  var cell = { evaluator: \"IPython\", input: { body: \"counts\" }, output: {} };\n\n  //Use the bkHelper API to evaluate the cell\n  bkHelper.evaluate(cell).then(function(){\n\n      //Grab the DF as a 2D JS array\n      var data = cell.output.result.values;\n    \n      //create a list of maps, as expected by the word cloud layout\n      var wc = [];\n      _.each(data, function(a){\n        wc.push({text: a[0], count: a[1]})\n      })\n\n    var fill = d3.scale.category20();\n    var fontSize = d3.scale.log().range([20, 100]);\n\n    var w = 800;\n    var h = 800;\n\n    d3.layout.cloud()\n        .size([w, h])\n        .words(wc)\n        .rotate(function(d) { return ~~(Math.random() * 5) * 30 - 60; })\n        .font(\"Impact\")\n        .fontSize(function(d) { return fontSize(+d.count); })\n        .on(\"end\", draw)\n        .start();\n\n    function draw(words) {\n      d3.select(\"#cloud\").append(\"svg\")\n          .attr(\"width\", w)\n          .attr(\"height\", h)\n        .append(\"g\")\n          .attr(\"transform\", \"translate(300,300)\")\n        .enter().append(\"text\")\n          .style(\"font-size\", function(d) { return d.size + \"px\"; })\n          .style(\"font-family\", \"Impact\")\n          .style(\"fill\", function(d, i) { return fill(i); })\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n          })\n          .text(function(d) { return d.text; });\n    }    \n  })  \n  \n  \n</script>"
                },
                "elapsedTime": 79
            }
        }
    ]
}
